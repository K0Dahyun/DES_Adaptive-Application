// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AdaptiveAUTOSARDDSIdl.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "AdaptiveAUTOSARDDSIdl.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

eprosima_dds::ProvidedInterface_Out1::ProvidedInterface_Out1()
{
    // m_m_double com.eprosima.idl.parser.typecode.PrimitiveTypeCode@39c0f4a
    m_m_double = 0.0;

}

eprosima_dds::ProvidedInterface_Out1::ProvidedInterface_Out1(
    const double &m_double)
{

    m_m_double = m_double;

}
eprosima_dds::ProvidedInterface_Out1::~ProvidedInterface_Out1()
{
}

eprosima_dds::ProvidedInterface_Out1::ProvidedInterface_Out1(
        const ProvidedInterface_Out1& x)
{
    m_m_double = x.m_m_double;
}

eprosima_dds::ProvidedInterface_Out1::ProvidedInterface_Out1(
        ProvidedInterface_Out1&& x)
{
    m_m_double = x.m_m_double;
}

eprosima_dds::ProvidedInterface_Out1& eprosima_dds::ProvidedInterface_Out1::operator =(
        const ProvidedInterface_Out1& x)
{

    m_m_double = x.m_m_double;

    return *this;
}

eprosima_dds::ProvidedInterface_Out1& eprosima_dds::ProvidedInterface_Out1::operator =(
        ProvidedInterface_Out1&& x)
{

    m_m_double = x.m_m_double;

    return *this;
}

bool eprosima_dds::ProvidedInterface_Out1::operator ==(
        const ProvidedInterface_Out1& x) const
{

    return (m_m_double == x.m_m_double);
}

bool eprosima_dds::ProvidedInterface_Out1::operator !=(
        const ProvidedInterface_Out1& x) const
{
    return !(*this == x);
}

size_t eprosima_dds::ProvidedInterface_Out1::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

size_t eprosima_dds::ProvidedInterface_Out1::getCdrSerializedSize(
        const eprosima_dds::ProvidedInterface_Out1& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void eprosima_dds::ProvidedInterface_Out1::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_m_double;

}

void eprosima_dds::ProvidedInterface_Out1::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_m_double;
}

/*!
 * @brief This function sets a value in member m_double
 * @param _m_double New value for member m_double
 */
void eprosima_dds::ProvidedInterface_Out1::m_double(
        double _m_double)
{
    m_m_double = _m_double;
}

/*!
 * @brief This function returns the value of member m_double
 * @return Value of member m_double
 */
double eprosima_dds::ProvidedInterface_Out1::m_double() const
{
    return m_m_double;
}

/*!
 * @brief This function returns a reference to member m_double
 * @return Reference to member m_double
 */
double& eprosima_dds::ProvidedInterface_Out1::m_double()
{
    return m_m_double;
}


size_t eprosima_dds::ProvidedInterface_Out1::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool eprosima_dds::ProvidedInterface_Out1::isKeyDefined()
{
    return false;
}

void eprosima_dds::ProvidedInterface_Out1::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


eprosima_dds::RequiredInterface_In1::RequiredInterface_In1()
{
    // m_m_double com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5442a311
    m_m_double = 0.0;

}

eprosima_dds::RequiredInterface_In1::RequiredInterface_In1(
    const double &m_double)
{

    m_m_double = m_double;

}
eprosima_dds::RequiredInterface_In1::~RequiredInterface_In1()
{
}

eprosima_dds::RequiredInterface_In1::RequiredInterface_In1(
        const RequiredInterface_In1& x)
{
    m_m_double = x.m_m_double;
}

eprosima_dds::RequiredInterface_In1::RequiredInterface_In1(
        RequiredInterface_In1&& x)
{
    m_m_double = x.m_m_double;
}

eprosima_dds::RequiredInterface_In1& eprosima_dds::RequiredInterface_In1::operator =(
        const RequiredInterface_In1& x)
{

    m_m_double = x.m_m_double;

    return *this;
}

eprosima_dds::RequiredInterface_In1& eprosima_dds::RequiredInterface_In1::operator =(
        RequiredInterface_In1&& x)
{

    m_m_double = x.m_m_double;

    return *this;
}

bool eprosima_dds::RequiredInterface_In1::operator ==(
        const RequiredInterface_In1& x) const
{

    return (m_m_double == x.m_m_double);
}

bool eprosima_dds::RequiredInterface_In1::operator !=(
        const RequiredInterface_In1& x) const
{
    return !(*this == x);
}

size_t eprosima_dds::RequiredInterface_In1::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

size_t eprosima_dds::RequiredInterface_In1::getCdrSerializedSize(
        const eprosima_dds::RequiredInterface_In1& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void eprosima_dds::RequiredInterface_In1::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_m_double;

}

void eprosima_dds::RequiredInterface_In1::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_m_double;
}

/*!
 * @brief This function sets a value in member m_double
 * @param _m_double New value for member m_double
 */
void eprosima_dds::RequiredInterface_In1::m_double(
        double _m_double)
{
    m_m_double = _m_double;
}

/*!
 * @brief This function returns the value of member m_double
 * @return Value of member m_double
 */
double eprosima_dds::RequiredInterface_In1::m_double() const
{
    return m_m_double;
}

/*!
 * @brief This function returns a reference to member m_double
 * @return Reference to member m_double
 */
double& eprosima_dds::RequiredInterface_In1::m_double()
{
    return m_m_double;
}


size_t eprosima_dds::RequiredInterface_In1::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool eprosima_dds::RequiredInterface_In1::isKeyDefined()
{
    return false;
}

void eprosima_dds::RequiredInterface_In1::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

