// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AdaptiveAUTOSARDDSIdl.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_EPROSIMA_DDS_ADAPTIVEAUTOSARDDSIDL_H_
#define _FAST_DDS_GENERATED_EPROSIMA_DDS_ADAPTIVEAUTOSARDDSIDL_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(AdaptiveAUTOSARDDSIdl_SOURCE)
#define AdaptiveAUTOSARDDSIdl_DllAPI __declspec( dllexport )
#else
#define AdaptiveAUTOSARDDSIdl_DllAPI __declspec( dllimport )
#endif // AdaptiveAUTOSARDDSIdl_SOURCE
#else
#define AdaptiveAUTOSARDDSIdl_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define AdaptiveAUTOSARDDSIdl_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace eprosima_dds {
    /*!
     * @brief This class represents the structure ProvidedInterface_Out1 defined by the user in the IDL file.
     * @ingroup ADAPTIVEAUTOSARDDSIDL
     */
    class ProvidedInterface_Out1
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ProvidedInterface_Out1();

        /*!
         * @brief Constructor with members
         */
        eProsima_user_DllExport ProvidedInterface_Out1(
                const double &m_double);

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ProvidedInterface_Out1();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object eprosima_dds::ProvidedInterface_Out1 that will be copied.
         */
        eProsima_user_DllExport ProvidedInterface_Out1(
                const ProvidedInterface_Out1& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object eprosima_dds::ProvidedInterface_Out1 that will be copied.
         */
        eProsima_user_DllExport ProvidedInterface_Out1(
                ProvidedInterface_Out1&& x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object eprosima_dds::ProvidedInterface_Out1 that will be copied.
         */
        eProsima_user_DllExport ProvidedInterface_Out1& operator =(
                const ProvidedInterface_Out1& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object eprosima_dds::ProvidedInterface_Out1 that will be copied.
         */
        eProsima_user_DllExport ProvidedInterface_Out1& operator =(
                ProvidedInterface_Out1&& x);

        /*!
         * @brief Comparison operator.
         * @param x eprosima_dds::ProvidedInterface_Out1 object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ProvidedInterface_Out1& x) const;

        /*!
         * @brief Comparison operator.
         * @param x eprosima_dds::ProvidedInterface_Out1 object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ProvidedInterface_Out1& x) const;

        /*!
         * @brief This function sets a value in member m_double
         * @param _m_double New value for member m_double
         */
        eProsima_user_DllExport void m_double(
                double _m_double);

        /*!
         * @brief This function returns the value of member m_double
         * @return Value of member m_double
         */
        eProsima_user_DllExport double m_double() const;

        /*!
         * @brief This function returns a reference to member m_double
         * @return Reference to member m_double
         */
        eProsima_user_DllExport double& m_double();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const eprosima_dds::ProvidedInterface_Out1& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        double m_m_double;
    };
} // namespace eprosima_dds
namespace eprosima_dds {
    /*!
     * @brief This class represents the structure RequiredInterface_In1 defined by the user in the IDL file.
     * @ingroup ADAPTIVEAUTOSARDDSIDL
     */
    class RequiredInterface_In1
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport RequiredInterface_In1();

        /*!
         * @brief Constructor with members
         */
        eProsima_user_DllExport RequiredInterface_In1(
                const double &m_double);

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~RequiredInterface_In1();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object eprosima_dds::RequiredInterface_In1 that will be copied.
         */
        eProsima_user_DllExport RequiredInterface_In1(
                const RequiredInterface_In1& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object eprosima_dds::RequiredInterface_In1 that will be copied.
         */
        eProsima_user_DllExport RequiredInterface_In1(
                RequiredInterface_In1&& x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object eprosima_dds::RequiredInterface_In1 that will be copied.
         */
        eProsima_user_DllExport RequiredInterface_In1& operator =(
                const RequiredInterface_In1& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object eprosima_dds::RequiredInterface_In1 that will be copied.
         */
        eProsima_user_DllExport RequiredInterface_In1& operator =(
                RequiredInterface_In1&& x);

        /*!
         * @brief Comparison operator.
         * @param x eprosima_dds::RequiredInterface_In1 object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const RequiredInterface_In1& x) const;

        /*!
         * @brief Comparison operator.
         * @param x eprosima_dds::RequiredInterface_In1 object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const RequiredInterface_In1& x) const;

        /*!
         * @brief This function sets a value in member m_double
         * @param _m_double New value for member m_double
         */
        eProsima_user_DllExport void m_double(
                double _m_double);

        /*!
         * @brief This function returns the value of member m_double
         * @return Value of member m_double
         */
        eProsima_user_DllExport double m_double() const;

        /*!
         * @brief This function returns a reference to member m_double
         * @return Reference to member m_double
         */
        eProsima_user_DllExport double& m_double();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const eprosima_dds::RequiredInterface_In1& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        double m_m_double;
    };
} // namespace eprosima_dds

#endif // _FAST_DDS_GENERATED_EPROSIMA_DDS_ADAPTIVEAUTOSARDDSIDL_H_